/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Counter;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

import javax.swing.JPanel;
import javax.swing.JTable;
import net.miginfocom.swing.MigLayout;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.mcavallo.opencloud.Cloud;
import org.mcavallo.opencloud.Tag;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//Counter//TestFile//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TestFileTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "Counter.TestFileTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TestFileAction",
        preferredID = "TestFileTopComponent"
)
@Messages({
    "CTL_TestFileAction=TestFile",
    "CTL_TestFileTopComponent=TestFile Window",
    "HINT_TestFileTopComponent=This is a TestFile window"
})
public final class TestFileTopComponent extends TopComponent {

    public TestFileTopComponent() {
        initComponents();
        setName(Bundle.CTL_TestFileTopComponent());
        setToolTipText(Bundle.HINT_TestFileTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();

        jTextField1.setText(org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jTextField1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.text")); // NOI18N
        jButton1.setName(""); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Word", "Frequency"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jTable1.columnModel.title0")); // NOI18N
            jTable1.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jTable1.columnModel.title3")); // NOI18N
        }

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        jSpinner1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSpinner1PropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jLabel1.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jTextField2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jButton2.text")); // NOI18N
        jButton2.setName(""); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Word", "Frequency"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jTable1.columnModel.title0")); // NOI18N
            jTable2.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jTable1.columnModel.title3")); // NOI18N
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 323, Short.MAX_VALUE)
        );

        jPanel3.setMaximumSize(new java.awt.Dimension(0, 418));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jPanel4.setPreferredSize(new java.awt.Dimension(0, 418));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox2, org.openide.util.NbBundle.getMessage(TestFileTopComponent.class, "TestFileTopComponent.jCheckBox2.text")); // NOI18N
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBox1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1))
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jCheckBox2)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(9, 9, 9)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            path = selectedFile.getAbsolutePath();
            jTextField1.setText(path);
            try {
                FreqDict = WordCount.ProcessFile(path);
                for (WordCount.WordData w : FreqDict) {
                    Object[] row = {w.word, w.count};
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.addRow(row);
                }

            } catch (Exception ex) {
            }
            jCheckBox1ActionPerformed(evt);
            if (jTable1.getRowCount() > 0 && jTable2.getRowCount() > 0) {
                jSpinner1.setEnabled(true);
                jButton3.setEnabled(true);
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSpinner1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSpinner1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinner1PropertyChange

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            path = selectedFile.getAbsolutePath();
            jTextField2.setText(path);
            try {
                RSTDict = WordCount.ProcessFile(path);
                for (WordCount.WordData w : RSTDict) {
                    Object[] row = {w.word, w.count};
                    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                    model.addRow(row);
                }

            } catch (Exception ex) {
            }

            jCheckBox2ActionPerformed(evt);
            if (jTable1.getRowCount() > 0 && jTable2.getRowCount() > 0) {
                jSpinner1.setEnabled(true);
                jButton3.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int succ = jTable1.getRowCount();
        int counts = 0;

        ArrayList<String> t1 = new ArrayList<String>();
        ArrayList<String> t2 = new ArrayList<String>();

        for (int i = 0; i < succ; i++) {
            t1.add(jTable1.getModel().getValueAt(i, 0).toString());
            t2.add(jTable2.getModel().getValueAt(i, 0).toString());
        }

        for (int i = 0; i < succ; i++) {
            if (Collections.frequency(t2, t1.get(i)) != 0) {
                counts++;
            }
        }
        double tmp = (double) counts / succ * 100;
        double res = Math.round(tmp);

        if (res <= 20) {
            jLabel3.setForeground(Color.red);
        }
        if (res > 20 && res <= 40) {
            jLabel3.setForeground(Color.CYAN);
        }
        if (res > 40 && res <= 60) {
            jLabel3.setForeground(Color.BLUE);
        }
        if (res > 60) {
            jLabel3.setForeground(Color.GREEN);
        }
        jLabel3.setText("Quality is " + res + "%");

        JFreeChart chart = ChartFactory.createPieChart3D(
                "", // chart title 
                createDataset(counts, succ), // data    
                false, // include legend   
                true,
                false);
        JPanel jp = new ChartPanel(chart);

        jp.setPreferredSize(
                new Dimension(324, 300));
        //chart.setBackgroundPaint(Color.TRANSPARENT);
        //ChartUtilities.applyCurrentTheme(chart);
        jPanel2.removeAll();

        jPanel2.revalidate();

        jPanel2.setLayout(
                new BorderLayout());
        jPanel2.add(jp, BorderLayout.CENTER);

        jPanel2.revalidate();

        jp.setVisible(
                true);
        jPanel2.setVisible(
                true);


    }//GEN-LAST:event_jButton3ActionPerformed

    private JPanel Curpan;

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:

        JTable curTable = jTable1;
        Curpan = jPanel3;

        if (jCheckBox1.isSelected()) {
            int succ = curTable.getRowCount();
            Cloud cloud = new Cloud();
            JPanel panel = new JPanel();
            panel.setLayout(new MigLayout("wrap 7"));
            for (int i = 0; i < succ; i++) {
                for (int j = 0; j < Integer.parseInt(curTable.getModel().getValueAt(i, 1).toString()); j++) {
                    cloud.addTag(curTable.getModel().getValueAt(i, 0).toString());
                }
            }
            for (Tag tag : cloud.tags()) {
                final JLabel label = new JLabel(tag.getName());
                label.setOpaque(false);
                label.setFont(label.getFont().deriveFont((float) tag.getWeight() * 10));
                panel.add(label);
            }
            // panel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);

            Curpan.removeAll();
            Curpan.revalidate();
            panel.setSize(300, 300);
            Curpan.setLayout(new BorderLayout());
            Curpan.add(panel, BorderLayout.CENTER);
            Curpan.revalidate();
            panel.setVisible(true);
            Curpan.setVisible(true);

        } else {
            int succ = curTable.getRowCount();
            final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (int i = 0; i < succ; i++) {
                dataset.addValue(i, curTable.getModel().getValueAt(i, 0).toString(), curTable.getModel().getValueAt(i, 1).toString());
            }
            JFreeChart barChart = ChartFactory.createBarChart(
                    "",
                    "frequency",
                    "count",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);
            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new java.awt.Dimension(300, 300));

            Curpan.removeAll();
            Curpan.revalidate();
            Curpan.setLayout(new BorderLayout());
            Curpan.add(chartPanel, BorderLayout.CENTER);
            Curpan.revalidate();
            chartPanel.setVisible(true);
            Curpan.setVisible(true);

        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        JTable curTable = jTable2;
        Curpan = jPanel4;

        if (jCheckBox2.isSelected()) {
            int succ = curTable.getRowCount();
            Cloud cloud = new Cloud();
            JPanel panel = new JPanel();
            panel.setLayout(new MigLayout("wrap 7"));
            for (int i = 0; i < succ; i++) {
                for (int j = 0; j < Integer.parseInt(curTable.getModel().getValueAt(i, 1).toString()); j++) {
                    cloud.addTag(curTable.getModel().getValueAt(i, 0).toString());
                }
            }
            for (Tag tag : cloud.tags()) {
                final JLabel label = new JLabel(tag.getName());
                label.setOpaque(false);
                label.setFont(label.getFont().deriveFont((float) tag.getWeight() * 10));
                panel.add(label);
            }
            // panel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);

            Curpan.removeAll();
            Curpan.revalidate();
            panel.setSize(300, 300);
            Curpan.setLayout(new BorderLayout());
            Curpan.add(panel, BorderLayout.CENTER);
            Curpan.revalidate();
            panel.setVisible(true);
            Curpan.setVisible(true);

        } else {
            int succ = curTable.getRowCount();
            final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (int i = 0; i < succ; i++) {
                dataset.addValue(i, curTable.getModel().getValueAt(i, 0).toString(), curTable.getModel().getValueAt(i, 1).toString());
            }
            JFreeChart barChart = ChartFactory.createBarChart(
                    "",
                    "frequency",
                    "count",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);
            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new java.awt.Dimension(300, 300));

            Curpan.removeAll();
            Curpan.revalidate();
            Curpan.setLayout(new BorderLayout());
            Curpan.add(chartPanel, BorderLayout.CENTER);
            Curpan.revalidate();
            chartPanel.setVisible(true);
            Curpan.setVisible(true);

        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private static PieDataset createDataset(int newW, int oldW) {
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Restored Words (" + newW + ")", new Double(newW));
        dataset.setValue("Original Words (" + oldW + ")", new Double(oldW));
        return dataset;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening

        jSpinner1.addChangeListener(
                new ChangeListener() {
                    public void stateChanged(ChangeEvent e) {
                        jCheckBox1.setSelected(false);
                        jCheckBox2.setSelected(false);
                        topNWords = Integer.parseInt(jSpinner1.getValue().toString());
                        if (topNWords != 0 && path != null) {
                            int num = 0;

//                            for (int i = jTable2.getRowCount() - 1; i > topNWords; i--) {
//                                DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
//                                dtm.removeRow(num);
//                                jTable2.setModel(dtm);
//                           }
                            try {
                                DefaultTableModel tmodel = (DefaultTableModel) jTable1.getModel();
                                while (tmodel.getRowCount() > 0) {
                                    tmodel.removeRow(0);
                                }

                                DefaultTableModel tmodel2 = (DefaultTableModel) jTable2.getModel();
                                while (tmodel2.getRowCount() > 0) {
                                    tmodel2.removeRow(0);
                                }

                                for (WordCount.WordData w : FreqDict) {
                                    Object[] row = {w.word, w.count};
                                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                                    if (num < topNWords) {
                                        model.addRow(row);
                                    }
                                    num++;

                                }
                                num = 0;
                                for (WordCount.WordData w : RSTDict) {
                                    Object[] row = {w.word, w.count};
                                    DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
                                    if (num < topNWords) {
                                        model2.addRow(row);
                                    }
                                    num++;

                                }

                            } catch (Exception ex) {
                            }
                            int succ = jTable1.getRowCount();
                            final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                            for (int i = 0; i < succ; i++) {
                                dataset.addValue(i, jTable1.getModel().getValueAt(i, 0).toString(), jTable1.getModel().getValueAt(i, 1).toString());
                            }
                            JFreeChart barChart = ChartFactory.createBarChart(
                                    "",
                                    "frequency",
                                    "count",
                                    dataset,
                                    PlotOrientation.VERTICAL,
                                    true, true, false);
                            ChartPanel chartPanel = new ChartPanel(barChart);
                            chartPanel.setPreferredSize(new java.awt.Dimension(300, 300));

                            jPanel3.removeAll();
                            jPanel3.revalidate();
                            jPanel3.setLayout(new BorderLayout());
                            jPanel3.add(chartPanel, BorderLayout.CENTER);
                            jPanel3.revalidate();
                            chartPanel.setVisible(true);
                            jPanel3.setVisible(true);

                            final DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();
                            for (int i = 0; i < succ; i++) {
                                dataset2.addValue(i, jTable2.getModel().getValueAt(i, 0).toString(), jTable2.getModel().getValueAt(i, 1).toString());
                            }
                            JFreeChart barChart2 = ChartFactory.createBarChart(
                                    "",
                                    "frequency",
                                    "count",
                                    dataset2,
                                    PlotOrientation.VERTICAL,
                                    true, true, false);
                            ChartPanel chartPanel2 = new ChartPanel(barChart2);
                            chartPanel2.setPreferredSize(new java.awt.Dimension(300, 300));

                            jPanel4.removeAll();
                            jPanel4.revalidate();
                            jPanel4.setLayout(new BorderLayout());
                            jPanel4.add(chartPanel2, BorderLayout.CENTER);
                            jPanel4.revalidate();
                            chartPanel2.setVisible(true);
                            jPanel4.setVisible(true);

                        }

                    }
                }
        );
        Curpan = jPanel3;
        jSpinner1.setEnabled(false);
        jButton3.setEnabled(false);

    }

    private static int topNWords = 0;
    private ArrayList<WordCount.WordData> FreqDict, RSTDict;
    private String path;

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
